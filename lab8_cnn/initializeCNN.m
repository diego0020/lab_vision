function net = initializeCNN()

f=1/100 ;
net.layers = {} ;

%Layer 1: Convolutional layer. Input size: 32x32 

net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(5,5,1,20, 'single'), ...
                           'biases', zeros(1, 20, 'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
%Layer 2: Pooling layer. Input size: 28x28x20
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
%Layer 3: Convoluting layer. Input size: 28x28x20 
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(4,4,50,500, 'single'),...
                           'biases', zeros(1,500,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
%Layer 4. Input size: 24x24x20x500
net.layers{end+1} = struct('type', 'relu') ;

%Layer 5: Convolutional layer. Input: 24x240000
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(2,2,500,750, 'single'),...
                           'biases', zeros(1,750,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
                       
%Layer 6 Input: 20x240996x750
net.layers{end+1} = struct('type', 'softmaxloss');



% f=1/100 ;
% net.layers = {} ;
% net.layers{end+1} = struct('type', 'conv', ...
%                            'filters', f*randn(5,5,1,20, 'single'), ...
%                            'biases', zeros(1, 20, 'single'), ...
%                            'stride', 1, ...
%                            'pad', 0) ;
% net.layers{end+1} = struct('type', 'pool', ...
%                            'method', 'max', ...
%                            'pool', [2 2], ...
%                            'stride', 2, ...
%                            'pad', 0) ;
% net.layers{end+1} = struct('type', 'conv', ...
%                            'filters', f*randn(5,5,20,50, 'single'),...
%                            'biases', zeros(1,50,'single'), ...
%                            'stride', 1, ...
%                            'pad', 0) ;
% net.layers{end+1} = struct('type', 'pool', ...
%                            'method', 'max', ...
%                            'pool', [2 2], ...
%                            'stride', 2, ...
%                            'pad', 0) ;
% net.layers{end+1} = struct('type', 'conv', ...
%                            'filters', f*randn(4,4,50,500, 'single'),...
%                            'biases', zeros(1,500,'single'), ...
%                            'stride', 1, ...
%                            'pad', 0) ;
% net.layers{end+1} = struct('type', 'relu') ;
% net.layers{end+1} = struct('type', 'conv', ...
%                            'filters', f*randn(2,2,500,26, 'single'),...
%                            'biases', zeros(1,26,'single'), ...
%                            'stride', 1, ...
%                            'pad', 0) ;
% net.layers{end+1} = struct('type', 'softmaxloss') ;
